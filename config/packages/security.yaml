security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: Infrastructure\Entities\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticator: Infrastructure\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      # comment the following lines to disable 2FA
      two_factor:
        auth_form_path: 2fa_login
        check_path: 2fa_login_check

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/logout, role: PUBLIC_ACCESS }
    - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
    - { path: ^/login , roles: PUBLIC_ACCESS }
    - { path: ^/webhooks , roles: PUBLIC_ACCESS }
    - { path: ^/reset-password , roles: PUBLIC_ACCESS }
    - { path: ^/password/register , roles: PUBLIC_ACCESS }
    - { path: ^/email/validate , roles: PUBLIC_ACCESS }
    - { path: ^/email , roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
    # - { path: ^/profile, roles: ROLE_USER }

  role_hierarchy:
    ROLE_UTILISATEUR: ~
    ROLE_ADMINISTRATEUR_LOGICIEL: [ ROLE_USER ]
    ROLE_ADMINISTRATEUR_CLIENT: [ ROLE_USER ]

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
